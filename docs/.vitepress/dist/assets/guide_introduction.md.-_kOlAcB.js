import{_ as e,c as t,o as a,a2 as o}from"./chunks/framework.CH2jnE6d.js";const m=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md","lastUpdated":1713949504000}'),n={name:"guide/introduction.md"},r=o('<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>Welcome to the documentation for <code>pdgen</code>, a tool designed to transform your Python code into UML class diagrams. <code>pdgen</code> aims to streamline the visualization process for developers, architects, and analysts, allowing them to better understand and communicate the structure of their software.</p><h2 id="what-is-pdgen" tabindex="-1">What is pdgen? <a class="header-anchor" href="#what-is-pdgen" aria-label="Permalink to &quot;What is pdgen?&quot;">​</a></h2><p><code>pdgen</code> is a Python library that automatically generates UML class diagrams from Python codebases. It parses your Python files, identifies classes, methods, attributes, and their relationships, and then renders these elements into a UML class diagram.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><strong>Automatic Diagram Generation</strong>: Automatically generate diagrams from your Python code without the need for manual setup.</li><li><strong>Support for Complex Hierarchies</strong>: Understand complex inheritance and composition relationships with clear and accurate diagrams.</li><li><strong>Customizable Output</strong>: Tailor the output to fit your needs with various configuration options that control diagram layout, color schemes, and more.</li><li><strong>Integration Friendly</strong>: Easily integrate with existing projects or workflows to generate diagrams as part of your documentation process.</li></ul><h2 id="why-use-pdgen" tabindex="-1">Why Use pdgen? <a class="header-anchor" href="#why-use-pdgen" aria-label="Permalink to &quot;Why Use pdgen?&quot;">​</a></h2><p>Using <code>pdgen</code> can significantly enhance your development process by providing several benefits:</p><ul><li><strong>Improved Code Understanding</strong>: Quickly get a visual overview of your code&#39;s structure, which is especially useful for onboarding new developers or analyzing legacy code.</li><li><strong>Better Design Decisions</strong>: By visualizing the architecture, you can identify design flaws and improve your software&#39;s overall structure and performance.</li><li><strong>Enhanced Documentation</strong>: Automatically generated diagrams serve as an excellent addition to your project&#39;s documentation, helping others understand your architectural decisions.</li></ul><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><p>To get started with <code>pdgen</code>, visit our <a href="/guide/installation.html">Installation</a> page to learn how to install and configure <code>pdgen</code> in your Python environment.</p><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>After setting up, you&#39;ll want to learn how to use <code>pdgen</code> effectively. Please proceed to the <a href="/guide/usage.html">Usage</a> page for detailed instructions on generating your first UML diagram with <code>pdgen</code>.</p>',13),i=[r];function s(d,l,c,u,h,g){return a(),t("div",null,i)}const f=e(n,[["render",s]]);export{m as __pageData,f as default};
