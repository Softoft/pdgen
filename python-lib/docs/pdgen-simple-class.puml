@startuml
!theme mars

package UMLTypes {
    class Diagram{
        classes: List[Class]
    }

    class Class{
        name: str
        attributes
        methods
    }
    class Method{
        name: str
        params
        visibility
        returnType: str
    }

    class Attribute{
        name: str
        type: str
    }

    class Parameter{
        name: str
        type: str
    }


    Class *-down-> Attribute
    Class *-> Method
    Method *-down-> Parameter
    Method -[hidden]right- Attribute


    Diagram *--> Class
}
package Decorators{
    class MethodDecorator{
    }
    class ClassDecorator{
    }
}
class ClassStore {
    - classes: List[type]
    + add(cls: type)
    + get_all(): List[type]
}

ClassDecorator ..> ClassStore: uses

class TypeHintService{
    get_type_hints(func: Callable) -> dict[str, type])
    get_type_hints(cls: class) -> dict[str, type])
}

class MethodFactory{
    create_method()
}

class AttributeFactory{
    create_attribute()
}

class ClassFactory{
    create_class()
}

ClassFactory ..> MethodFactory: uses
ClassFactory ..> AttributeFactory: uses

MethodFactory ..> TypeHintService: uses
AttributeFactory ..> TypeHintService: uses


class DiagramGenerator {
    generate_diagram() : str
}

class PlantUMLDiagramConverter{
}

DiagramGenerator ...> ClassFactory: uses
DiagramGenerator ...> ClassStore: uses
DiagramGenerator ..> Diagram: generates
PlantUMLDiagramConverter .. Diagram: converts
DiagramGenerator ..> PlantUMLDiagramConverter: uses
@enduml