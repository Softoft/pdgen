@startuml
!theme mars

rectangle UMLTypes {
    class Diagram{
        classes: List[Class]
    }

    class IncludeInUML{
        name: str
        attributes
        methods
    }
    class Method{
        name: str
        params
        returnType: str
    }

    class Attribute{
        name: str
        type: str
    }

    class Parameter{
        name: str
        type: str
    }


    IncludeInUML *-down-> Attribute
    IncludeInUML *-> Method
    Method *-down-> Parameter
    Method -[hidden]right- Attribute


    Diagram *-> IncludeInUML
}

rectangle Decorator {
    class IncludeInUML{
    }

}



rectangle Services {
    class ClassStore {
        - classes: List[type]
        + add(cls: type)
        + get_all(): List[type]
    }
    class TypeHintService{
        get_type_hints(func: Callable) -> dict[str, type])
        get_type_hints(cls: class) -> dict[str, type])
    }

    class MethodFactory{
        create_method()
    }

    class AttributeFactory{
        create_attribute()
    }

    class ClassFactory{
        create_class()
    }

    ClassFactory ..> MethodFactory: uses
    ClassFactory ..> AttributeFactory: uses

    MethodFactory ..> TypeHintService: uses
    AttributeFactory ..> TypeHintService: uses
}

rectangle Diagrams{
    class DiagramGenerator {
        generate_diagram() : str
    }

    class DiagramFactory{
        create_uml_diagram()
    }
    DiagramGenerator ...> DiagramFactory: uses
}

rectangle PlantUML{
    class PlantUMLConverter{
        convert(diagram: UMLTypes.Diagram) -> str
    }
    class PlantUMLRenderer{
        render(diagram: str)
    }
}

Decorator.IncludeInUML .down.> ClassStore: uses

DiagramFactory ...> ClassFactory
DiagramFactory ...> ClassStore: uses
DiagramFactory ..> UMLTypes.Diagram
PlantUMLConverter .. UMLTypes.Diagram: converts
DiagramGenerator ..> PlantUMLConverter: uses
DiagramGenerator ..> PlantUMLRenderer: uses
@enduml