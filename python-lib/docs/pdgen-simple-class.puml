@startuml
!theme mars

' UMLTypes: Core data types for representing UML diagrams
rectangle UMLTypes {
    class Diagram {
        classes: List[Class]
    }

    class Class {
        name: str
        attributes: List[Attribute]
        methods: List[Method]
    }

    class Method {
        name: str
        params: List[Parameter]
        returnType: str
    }

    class Attribute {
        name: str
        type: str
    }

    Diagram o-down-> Class
    Class o-down-> Attribute
    Class o-down-> Method

    Attribute -[hidden]down- Method

}



' Decorator: Decorators for marking classes/methods to include in diagrams
rectangle Decorator {
    class IncludeInUML {}
}

' Services: Factories and repositories for managing UML-related data
rectangle Services {
    class ClassRepository {
        - classes: List[type]
        + add(cls: type)
        + get_all(): List[type]
    }

    class TypeHintService {
        get_type_hints(func)
        get_type_hints(cls)
    }

    class ClassFactory {
        create() : Class
    }

    class MethodFactory {
        create(): Method
    }

    class AttributeFactory {
        create() : Attribute
    }

    ClassFactory .down.> MethodFactory
    ClassFactory .down.> AttributeFactory



    MethodFactory ..> TypeHintService
    AttributeFactory ..> TypeHintService

    AttributeFactory -[hidden]down- MethodFactory
}

' Diagrams: Handles overall diagram generation and processing
rectangle Diagrams {
    class DiagramService {
        generate_diagram() : str
    }

    class DiagramFactory {
        create_uml_diagram() : Diagram
    }

    class PlantUMLRenderer {
        render(diagram: str)
    }

    DiagramService ...> DiagramFactory: uses
    Diagrams.DiagramService ..> PlantUMLRenderer
}

' PlantUML: Converts UML data into PlantUML format
rectangle PUMLConverter {
    class DiagramService {
        convert(diagram: Diagram) -> str
    }

    class ClassConverter {
        convert(cls: Class) -> str
    }

    class AttributeConverter {
        convert(attr: Attribute) -> str
    }

    class MethodConverter {
        convert(method: Method) -> str
    }



    DiagramService ..> ClassConverter
    ClassConverter ..> AttributeConverter
    ClassConverter ..> MethodConverter

    AttributeConverter -[hidden]down- MethodConverter
}
Decorator -[hidden]right- Diagrams
Decorator -[hidden]down- Services
Services -[hidden]right- UMLTypes
UMLTypes -[hidden]right- PUMLConverter
' Services Relationships
MethodFactory .right. UMLTypes.Method: creates
AttributeFactory .right. UMLTypes.Attribute: creates
ClassFactory .right. UMLTypes.Class: creates

Decorator.IncludeInUML .down.> ClassRepository

PUMLConverter.DiagramService ..> UMLTypes.Diagram
ClassConverter .. UMLTypes.Class: converts
AttributeConverter .. UMLTypes.Attribute: converts
MethodConverter .. UMLTypes.Method: converts

DiagramFactory ...> ClassFactory
DiagramFactory ...> ClassRepository
DiagramFactory .. UMLTypes.Diagram

Diagrams.DiagramService ..> PUMLConverter.DiagramService

@enduml
